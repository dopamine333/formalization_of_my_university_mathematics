import Mathlib.Analysis.ODE.Gronwall
open Set Real
open scoped Topology NNReal

theorem my_Icc_subset_of_forall_exists_gt
  {Œ± : Type u} [ConditionallyCompleteLinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]
  {a b : Œ±} {s : Set Œ±}
  (hs : IsClosed (s ‚à© Icc a b))
  (ha : a ‚àà s)
  (hgt : ‚àÄ x ‚àà s ‚à© Ico a b, ‚àÄ y ‚àà Ioi x, (s ‚à© Ioc x y).Nonempty)
  : Icc a b ‚äÜ s := by
  intro y hy
  let t := s ‚à© Icc a y
  have ht : IsClosed t := by
    unfold t
    have : Icc a y ‚äÜ Icc a b := Icc_subset_Icc_right hy.2
    rw [‚Üê inter_eq_self_of_subset_left this, inter_left_comm]
    apply isClosed_Icc.inter hs
  have hat : a ‚àà t := ‚ü®ha, (left_mem_Icc.mpr hy.1)‚ü©
  have nonempty : t.Nonempty := ‚ü®a, hat‚ü©
  have hyt : y ‚àà upperBounds t := by
    intro z ‚ü®hzs, hzy‚ü©
    exact hzy.2
  have bound : BddAbove t := ‚ü®y, hyt‚ü©
  let c := sSup t
  have hct : c ‚àà t := ht.csSup_mem nonempty bound
  have hcy : c ‚â§ y := csSup_le nonempty hyt
  obtain hcy | hcy := eq_or_lt_of_le hcy
  . rw [hcy] at hct; exact hct.1
  exfalso
  have hac : a ‚â§ c := le_csSup bound hat
  have ‚ü®z, hzs, hcz, hzy‚ü© := hgt c ‚ü®hct.1, hac, hcy.trans_le hy.2‚ü© y hcy
  . have hzt : z ‚àà t := ‚ü®hzs, (hac.trans_lt hcz).le, hzy‚ü©
    have hzc : z ‚â§ c := le_csSup bound hzt
    exact (hcz.trans_le hzc).false

theorem my_image_norm_le_of_norm_deriv_right_lt_deriv_boundary'
  {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f : ‚Ñù ‚Üí E} {a b : ‚Ñù} {f' : ‚Ñù ‚Üí E}
  (hf : ContinuousOn f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, HasDerivWithinAt f (f' x) (Ici x) x)
  {B B' : ‚Ñù ‚Üí ‚Ñù}
  (ha : ‚Äñf a‚Äñ ‚â§ B a)
  (hB : ContinuousOn B (Icc a b))
  (hB' : ‚àÄ x ‚àà Ico a b, HasDerivWithinAt B (B' x) (Ici x) x)
  (bound : ‚àÄ x ‚àà Ico a b, ‚Äñf x‚Äñ = B x ‚Üí ‚Äñf' x‚Äñ < B' x)
  ‚¶Éx : ‚Ñù‚¶Ñ
  : x ‚àà Icc a b ‚Üí ‚Äñf x‚Äñ ‚â§ B x := by
  intro hx
  let s := {x | ‚Äñf x‚Äñ ‚â§ B x}
  have hs : IsClosed (s ‚à© Icc a b) := by
    rw [inter_comm]
    show IsClosed {x ‚àà Icc a b | ‚Äñf x‚Äñ ‚â§ B x}
    apply isClosed_Icc.isClosed_le
    . exact hf.norm
    . exact hB
  have has : a ‚àà s := ha
  have hgt : ‚àÄ x ‚àà s ‚à© Ico a b, ‚àÄ y ‚àà Ioi x, (s ‚à© Ioc x y).Nonempty := by
    intro x ‚ü®hxs, hax, hxb‚ü© y hyx
    have : ‚Äñf x‚Äñ ‚â§ B x := hxs
    obtain h | h := eq_or_lt_of_le this
    . have ‚ü®r, hfr, hrB‚ü© := exists_between (bound x ‚ü®hax, hxb‚ü© h)
      have nhd‚ÇÅ : ‚àÄ·∂† z in ùìù[>] x, ‚Äñslope f x z‚Äñ < r := by
        have := (hf' x ‚ü®hax, hxb‚ü©).Ioi_of_Ici
        rw [hasDerivWithinAt_iff_tendsto_slope' notMem_Ioi_self] at this
        have := this.norm
        apply this.eventually (p := (. < r))
        exact Iio_mem_nhds hfr
      have nhd‚ÇÇ : ‚àÄ·∂† z in ùìù[>] x, slope (‚Äñf .‚Äñ) x z < r := by
        apply nhd‚ÇÅ.mono
        intro z hz
        apply lt_of_le_of_lt _ hz
        apply le_trans (le_abs_self _) _
        simp [slope, norm_smul, abs_mul, abs_inv]
        gcongr
        apply abs_norm_sub_norm_le
      have nhd‚ÇÉ :  ‚àÄ·∂† z in ùìù[>] x, r < slope B x z := by
        have := (hB' x ‚ü®hax, hxb‚ü©).Ioi_of_Ici
        rw [hasDerivWithinAt_iff_tendsto_slope' notMem_Ioi_self] at this
        apply this.eventually (p := (r < .))
        exact Ioi_mem_nhds hrB
      have nhd‚ÇÑ : ‚àÄ·∂† z in ùìù[>] x, x < z ‚àß z ‚â§ y := Ioc_mem_nhdsGT hyx
      have ‚ü®z, z_slope, hxz, hzy‚ü© := ((nhd‚ÇÇ.and nhd‚ÇÉ).and nhd‚ÇÑ).exists
      have hzs : ‚Äñf z‚Äñ ‚â§ B z := by
        have := (z_slope.1.trans z_slope.2).le
        rw [slope_def_field, slope_def_field, div_le_div_iff_of_pos_right] at this
        linarith
        linarith
      exact ‚ü®z, hzs, hxz, hzy‚ü©
    . have nhd‚ÇÅ : ‚àÄ·∂† z in ùìù[Icc a b] x, ‚Äñf z‚Äñ < B z := by
        apply Filter.Tendsto.eventually_lt _ _ h
        . exact hf.norm x ‚ü®hax, hxb.le‚ü©
        . exact hB x ‚ü®hax, hxb.le‚ü©
      have nhd‚ÇÇ : ‚àÄ·∂† z in ùìù[>] x, ‚Äñf z‚Äñ < B z := by
        rw [‚Üê nhdsWithin_Ioo_eq_nhdsGT hxb]
        apply nhd‚ÇÅ.filter_mono
        apply nhdsWithin_mono
        refine' (Ioo_subset_Ioo_left hax).trans (Ioo_subset_Icc_self)
      have nhd‚ÇÉ : ‚àÄ·∂† z in ùìù[>] x, x < z ‚àß z ‚â§ y := Ioc_mem_nhdsGT hyx
      have ‚ü®z, fz_pos, hxz, hzy‚ü© := (nhd‚ÇÇ.and nhd‚ÇÉ).exists
      exact ‚ü®z, fz_pos.le, hxz, hzy‚ü©
  exact my_Icc_subset_of_forall_exists_gt hs has hgt hx


theorem my_norm_le_gronwallBound_of_norm_deriv_right_le
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f f' : ‚Ñù ‚Üí E} {Œ¥ K Œµ a b : ‚Ñù}
  (hf : ContinuousOn f (Icc a b))
  (hf' : ‚àÄ x ‚àà Ico a b, HasDerivWithinAt f (f' x) (Ici x) x)
  (ha : ‚Äñf a‚Äñ ‚â§ Œ¥)
  (bound : ‚àÄ x ‚àà Ico a b, ‚Äñf' x‚Äñ ‚â§ K * ‚Äñf x‚Äñ + Œµ)
  (x : ‚Ñù)
  : x ‚àà Icc a b ‚Üí ‚Äñf x‚Äñ ‚â§ gronwallBound Œ¥ K Œµ (x - a) := by
  intro hx
  suffices ‚àÄ r > 0, ‚Äñf x‚Äñ ‚â§ gronwallBound Œ¥ K (Œµ + r) (x - a) by
    convert ContinuousWithinAt.closure_le
      (f := fun r ‚Ü¶ ‚Äñf x‚Äñ) (g := fun r ‚Ü¶ gronwallBound Œ¥ K (Œµ + r) (x - a))
      (x := 0) (s := Ioi 0) _ _ _ _ using 1
    . ring_nf
    . simp only [closure_Ioi, mem_Ici, le_refl]
    . exact continuousWithinAt_const
    . apply Continuous.continuousWithinAt
      apply (gronwallBound_continuous_Œµ _ _ _).comp (continuous_add_left Œµ)
    . exact this
  intro r rpos
  let g x := gronwallBound Œ¥ K (Œµ + r) (x - a)
  let g' x := K * g x + (Œµ + r)
  have hg : ContinuousOn g (Icc a b) := by
    apply HasDerivAt.continuousOn
    intros
    apply hasDerivAt_gronwallBound_shift
  have hg' : ‚àÄ x ‚àà Ico a b, HasDerivWithinAt g (g' x) (Ici x) x := by
    intros
    apply HasDerivAt.hasDerivWithinAt
    apply hasDerivAt_gronwallBound_shift
  have ha‚ÇÇ : ‚Äñf a‚Äñ ‚â§ g a := by
    unfold g
    rwa [sub_self, gronwallBound_x0]
  have bound‚ÇÇ : ‚àÄ x ‚àà Ico a b, ‚Äñf x‚Äñ = g x ‚Üí ‚Äñf' x‚Äñ < g' x := by
    intro x hx heq
    calc ‚Äñf' x‚Äñ
      _ ‚â§ K * ‚Äñf x‚Äñ + Œµ := bound x hx
      _ = K * g x + Œµ := by rw [heq]
      _ < K * g x + (Œµ + r) := by linarith
      _ = g' x := rfl
  apply my_image_norm_le_of_norm_deriv_right_lt_deriv_boundary'
  assumption'

theorem my_dist_le_of_trajectories_ODE
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {v : ‚Ñù ‚Üí E ‚Üí E} {K : ‚Ñù‚â•0} {f g : ‚Ñù ‚Üí E} {a b Œ¥ : ‚Ñù}
  (hv : ‚àÄ (t : ‚Ñù), LipschitzWith K (v t))
  (hf : ContinuousOn f (Icc a b))
  (hf' : ‚àÄ t ‚àà Ico a b, HasDerivWithinAt f (v t (f t)) (Ici t) t)
  (hg : ContinuousOn g (Icc a b))
  (hg' : ‚àÄ t ‚àà Ico a b, HasDerivWithinAt g (v t (g t)) (Ici t) t)
  (ha : dist (f a) (g a) ‚â§ Œ¥)
  (t : ‚Ñù)
  : t ‚àà Icc a b ‚Üí dist (f t) (g t) ‚â§ Œ¥ * exp (K * (t - a)) := by
  let h := f - g
  let h' t := (v t (f t) - v t (g t))
  have hh : ContinuousOn h (Icc a b) := hf.sub hg
  have hh' : ‚àÄ t ‚àà Ico a b, HasDerivWithinAt h (h' t) (Ici t) t :=
    fun t ht ‚Ü¶ (hf' t ht).sub (hg' t ht)
  have ha‚ÇÇ : ‚Äñh a‚Äñ ‚â§ Œ¥ := by rw [dist_eq_norm] at ha; exact ha
  have bound : ‚àÄ t ‚àà Ico a b, ‚Äñh' t‚Äñ ‚â§ K * ‚Äñh t‚Äñ + 0 := by
    intro t ht
    calc ‚Äñh' t‚Äñ
      _ = ‚Äñv t (f t) - v t (g t)‚Äñ := rfl
      _ ‚â§ K * ‚Äñf t - g t‚Äñ := by apply (hv t).norm_sub_le
      _ = K * ‚Äñh t‚Äñ := rfl
      _ = K * ‚Äñh t‚Äñ + 0 := by rw [add_zero]
  have norm_le := my_norm_le_gronwallBound_of_norm_deriv_right_le hh hh' ha‚ÇÇ bound t
  simp_rw [gronwallBound_Œµ0] at norm_le
  convert norm_le using 2
  apply dist_eq_norm_sub

theorem my_ODE_solution_unique_univ_aux_1
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {v : ‚Ñù ‚Üí E ‚Üí E} {K : ‚Ñù‚â•0} {f g : ‚Ñù ‚Üí E} {a b : ‚Ñù}
  (hv : ‚àÄ (t : ‚Ñù), LipschitzWith K (v t))
  (hf : ContinuousOn f (Icc a b))
  (hf' : ‚àÄ t ‚àà Ico a b, HasDerivWithinAt f (v t (f t)) (Ici t) t)
  (hg : ContinuousOn g (Icc a b))
  (hg' : ‚àÄ t ‚àà Ico a b, HasDerivWithinAt g (v t (g t)) (Ici t) t)
  (ha : f a = g a)
  (t : ‚Ñù)
  : t ‚àà Icc a b ‚Üí f t = g t := by
  intro ht
  replace ha := dist_le_zero.mpr ha
  have h := my_dist_le_of_trajectories_ODE hv hf hf' hg hg' ha t ht
  rw [zero_mul] at h
  exact dist_le_zero.mp h
