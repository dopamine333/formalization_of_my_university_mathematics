import Mathlib.Analysis.ODE.PicardLindelof

open Metric Set ODE Filter
open scoped Nat NNReal Topology BoundedContinuousFunction
/-
euler method to prove exist of solution of ode
u~(t)- f(t,uh(t))l = lf(ti,xi)- f(t,uh(t))l
~ lf(ti,xi)- f(t,xi)l + lf(t,xi)- f(t,uh(t))l
~ It- tiiP + luh(t)- xiiK
~hP+hMK
=h(P+MK) =ch¬∑


f'(t) = v(t, f(t))
t·µ¢‚Çä‚ÇÅ = t·µ¢ + h
u(t·µ¢‚Çä‚ÇÅ) = u(t·µ¢) + h * v(t·µ¢, u(t·µ¢))
for t ‚àà [t·µ¢, t·µ¢‚Çä‚ÇÅ)
  u(t) = u(t·µ¢) + (t - t·µ¢) * v(t·µ¢, u(t·µ¢))
  u'(t) = v(t·µ¢, u(t·µ¢)) (right deriv)

hv :
  v(t, .) is lip by K for all t
  v(., x) is lip by P for all x
  v is bound by M

use hv to show ‚Äñu'(t) - v(t, u(t))‚Äñ ‚â§ Œµ
for t ‚àà [t·µ¢, t·µ¢‚Çä‚ÇÅ)
  ‚Äñu'(t) - v(t, u(t))‚Äñ
  = ‚Äñv(t·µ¢, u(t·µ¢)) - v(t, u(t))‚Äñ
  ‚â§ ‚Äñv(t·µ¢, u(t·µ¢)) - v(t·µ¢, u(t))‚Äñ + ‚Äñv(t·µ¢, u(t)) - v(t, u(t))‚Äñ
  ‚â§ K * ‚Äñu(t·µ¢) - u(t)‚Äñ + P * ‚Äñt·µ¢ - t‚Äñ
  = K * ‚Äñu(t·µ¢) - (u(t·µ¢) + (t - t·µ¢) * v(t·µ¢, u(t·µ¢)))‚Äñ + P * ‚Äñt·µ¢ - t‚Äñ
  = K * ‚Äñ(t - t·µ¢) * v(t·µ¢, u(t·µ¢)))‚Äñ + P * ‚Äñt·µ¢ - t‚Äñ
  ‚â§ K * M * ‚Äñt - t·µ¢‚Äñ + P * ‚Äñt·µ¢ - t‚Äñ
  ‚â§ K * M * h + P * h
  ‚â§ (K * M + P) * h


for t ‚àà [t·µ¢, t·µ¢‚Çä‚ÇÅ)
  ‚Äñu'(t) - v(t, u(t))‚Äñ
  = ‚Äñv(t·µ¢, u(t·µ¢)) - v(t, u(t))‚Äñ
  ‚â§ ‚Äñv(t·µ¢, u(t·µ¢)) - v(t·µ¢, u(t))‚Äñ + ‚Äñv(t·µ¢, u(t)) - v(t, u(t))‚Äñ
  ‚â§ K * ‚Äñu(t·µ¢) - u(t)‚Äñ + P * ‚Äñt·µ¢ - t‚Äñ
  = K * ‚Äñu(t·µ¢) - (u(t·µ¢) + (t - t·µ¢) * v(t·µ¢, u(t·µ¢)))‚Äñ + P * ‚Äñt·µ¢ - t‚Äñ
  = K * ‚Äñ(t - t·µ¢) * v(t·µ¢, u(t·µ¢)))‚Äñ + P * ‚Äñt·µ¢ - t‚Äñ
  ‚â§ K * M * ‚Äñt - t·µ¢‚Äñ + P * ‚Äñt·µ¢ - t‚Äñ
  ‚â§ K * M * h + P * h
  ‚â§ (K * M + P) * h

-/

#check IsPicardLindelof

example : IsPicardLindelof
  (E := ‚Ñù) (f := fun _ x ‚Ü¶ x)
  (tmin := -1) (tmax := 1) (t‚ÇÄ := ‚ü®0, by simp‚ü©)
  (x‚ÇÄ := 0) (a := 1) (r := 0)
  (K := 1) (L := 1) where
  lipschitzOnWith:= by
    intro t hx
    rw [lipschitzOnWith_iff_norm_sub_le]
    intro x hx y hy
    dsimp
    rw [one_mul]
  continuousOn := by
    intro x hx
    exact continuousOn_const
  norm_le := by
    intro t ht x hx
    dsimp at hx ‚ä¢
    have : |x - 0| ‚â§ 1 := hx
    convert this
    ring
  mul_max_le := by
    dsimp
    ring_nf
    apply max_le <;> rfl

example : IsPicardLindelof
  (E := ‚Ñù) (f := fun _ x ‚Ü¶ x)
  (tmin := -1) (tmax := 1) (t‚ÇÄ := ‚ü®0, by simp‚ü©)
  (x‚ÇÄ := 0) (a := 1) (r := 0)
  (K := 1) (L := 1) where
  lipschitzOnWith t hx := by simp [LipschitzOnWith]
  continuousOn x hx := continuousOn_const
  norm_le t ht x hx := mem_closedBall_zero_iff.mp hx
  mul_max_le := by simp


#check ODE.contDiffOn_comp


#check IsPicardLindelof.exists_eq_forall_mem_Icc_hasDerivWithinAt
#check IsPicardLindelof.exists_forall_mem_closedBall_eq_forall_mem_Icc_hasDerivWithinAt
#check ContDiffAt.exists_forall_hasDerivAt_Ioo_eq_of_contDiffAt
#check ODE.FunSpace.compProj

#check ODE.FunSpace

/-
lipschitzOnWith : ‚àÄ t ‚àà Icc tmin tmax, LipschitzOnWith K (f t) (closedBall x‚ÇÄ a)
ODE.picard f t‚ÇÄ x‚ÇÄ Œ± t = x‚ÇÄ + ‚à´ (œÑ : ‚Ñù) in t‚ÇÄ..t, f œÑ (Œ± œÑ)

Œ± is lip by L
f(t, .) is lip by K

Œ≤ := x‚ÇÄ + ‚à´ (œÑ : ‚Ñù) in t‚ÇÄ..t, f œÑ (Œ± œÑ)
is Œ≤ lip? by?

‚ÄñŒ≤ t - Œ≤ t'‚Äñ
= ‚Äñ‚à´ (œÑ : ‚Ñù) in t'..t, f œÑ (Œ± œÑ)‚Äñ
‚â§ ‚à´ (œÑ : ‚Ñù) in t'..t, ‚Äñf œÑ (Œ± œÑ)‚Äñ
if f is bound by L
‚â§ ‚à´ (œÑ : ‚Ñù) in t'..t, L
= |t - t'| * L

it say
if f is bound by L then
‚àÄ Œ±, picard f t‚ÇÄ x‚ÇÄ Œ± t ‚àà FunSpace t‚ÇÄ x‚ÇÄ r L
-/

#check ODE.picard_apply

#check ODE.FunSpace.instInhabited
#check ODE.FunSpace.toContinuousMap

example
  [NormedAddCommGroup E] {x‚ÇÄ : E} {t‚ÇÄ : Icc tmin tmax}
  : FunSpace t‚ÇÄ x‚ÇÄ r L where
    toFun := fun _ ‚Ü¶ x‚ÇÄ
    lipschitzWith := LipschitzWith.const' x‚ÇÄ
    mem_closedBall‚ÇÄ := mem_closedBall_self r.2

example
  [NormedAddCommGroup E] {x‚ÇÄ : E} {t‚ÇÄ : Icc tmin tmax}
  : FunSpace t‚ÇÄ x‚ÇÄ r L where
    toFun := fun _ ‚Ü¶ x‚ÇÄ
    lipschitzWith := by
      rw [lipschitzWith_iff_dist_le_mul, dist_self]
      intros
      exact mul_nonneg L.2 dist_nonneg
    mem_closedBall‚ÇÄ := by
      rw [mem_closedBall, dist_self]
      exact r.2

#check zero_le
example (L : ‚Ñù‚â•0) : 0 ‚â§ L := zero_le L
#synth CanonicallyOrderedAdd ‚Ñù‚â•0

def my_toContinuousMap
  {E : Type u} [NormedAddCommGroup E] {tmin tmax : ‚Ñù}
  {t‚ÇÄ : ‚Üë(Icc tmin tmax)} {x‚ÇÄ : E} {r L : ‚Ñù‚â•0}
  : FunSpace t‚ÇÄ x‚ÇÄ r L ‚Ü™ C(‚Üë(Icc tmin tmax), E) where
    toFun := fun ‚ü®Œ±,lip,_‚ü© ‚Ü¶ {
      toFun := Œ±
      continuous_toFun := lip.continuous
    }
    inj' := by
      intro ‚ü®Œ±,_,_‚ü© ‚ü®Œ≤,_,_‚ü© h
      simp only [ContinuousMap.mk.injEq] at h
      simp only [FunSpace.mk.injEq]
      exact h

#check FunSpace.instMetricSpace
#check MetricSpace.induced
#check ContinuousMap.instMetricSpace
#check BoundedContinuousFunction.instMetricSpace
#check BoundedContinuousFunction.dist_le
#check BoundedContinuousFunction.dist_lt_iff_of_nonempty_compact
#check ContinuousMap.dist_le
#check ContinuousMap.dist_lt_iff_of_nonempty
example
  (t‚ÇÄ : Icc tmin tmax) (x‚ÇÄ : ‚Ñù)
  (f g : FunSpace t‚ÇÄ x‚ÇÄ r L)
  (hc : 0 ‚â§ C)
  : dist f g ‚â§ C ‚Üî ‚àÄ x, dist (f x) (g x) ‚â§ C := by
  have h1 : dist f g = dist f.toContinuousMap g.toContinuousMap := rfl
  have h2 : ‚àÄ x, dist (f x) (g x) = dist (f.toContinuousMap x) (g.toContinuousMap x) := fun _ ‚Ü¶ rfl
  simp only [h1, h2]
  apply ContinuousMap.dist_le hc
example
  (t‚ÇÄ : Icc tmin tmax) (x‚ÇÄ : ‚Ñù)
  (f g : FunSpace t‚ÇÄ x‚ÇÄ r L)
  : dist f g ‚â§ C ‚Üî ‚àÄ x, dist (f x) (g x) ‚â§ C := by
  have h1 : dist f g = dist f.toContinuousMap g.toContinuousMap := rfl
  have h2 : ‚àÄ x, dist (f x) (g x) = dist (f.toContinuousMap x) (g.toContinuousMap x) := fun _ ‚Ü¶ rfl
  have h3 : Nonempty (Icc tmin tmax) := ‚ü®t‚ÇÄ.1, t‚ÇÄ.2‚ü©
  simp only [h1, h2]
  apply ContinuousMap.dist_le_iff_of_nonempty

#check FunSpace.isUniformInducing_toContinuousMap
#check FunSpace.range_toContinuousMap
#check FunSpace.instCompleteSpace
-- #check ContinuousMap.instCompleteSpace
#check BoundedContinuousFunction.instCompleteSpace
#check cauchySeq_iff
#check cauchySeq_tendsto_of_complete
#check CompleteSpace.complete


#check le_of_tendsto
theorem my_le_of_tendsto_of_LinearOrder
  {Œ± : Type u} {Œ≤ : Type v} [TopologicalSpace Œ±] [LinearOrder Œ±] [ClosedIicTopology Œ±]
  {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [x.NeBot]
  (lim : Tendsto f x (ùìù a))
  (h : ‚àÄ·∂† (c : Œ≤) in x, f c ‚â§ b)
  : a ‚â§ b := by
  -- have : (f . ‚â§ b) ‚àà x := h
  -- have : (. ‚â§ b) ‚àà x.map f := this
  -- have : x.map f ‚â§ ùìù a := lim
  by_contra!
  have : ‚àÄ·∂† a' in ùìù a, b < a' := Ioi_mem_nhds this
  have : ‚àÄ·∂† c in x, b < f c := lim this
  have ‚ü®c, hc1, hc2‚ü©:= (this.and h).exists
  exact lt_irrefl _ (hc1.trans_le hc2)

theorem my_le_of_tendsto
  {Œ± : Type u} {Œ≤ : Type v} [TopologicalSpace Œ±] [Preorder Œ±] [ClosedIicTopology Œ±]
  {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [x.NeBot]
  (lim : Tendsto f x (ùìù a))
  (h : ‚àÄ·∂† (c : Œ≤) in x, f c ‚â§ b)
  : a ‚â§ b := by
  have : IsClosed (Iic b) := isClosed_Iic
  have : ‚àÉ·∂† fc in ùìù a, fc ‚â§ b := by
    refine lim.frequently_map f ?_ h.frequently
    intros
    assumption'
  have ha : a ‚àà closure (Iic b) := by
    apply mem_closure_iff_frequently.mpr this
  have : closure (Iic b) = Iic b := isClosed_Iic.closure_eq
  rw [this] at ha
  exact ha

#check BoundedContinuousFunction.instCompleteSpace
theorem my_BoundedContinuousFunction_instCompleteSpace
  {Œ± : Type u} {Œ≤ : Type v} [TopologicalSpace Œ±] [PseudoMetricSpace Œ≤]
  [CompleteSpace Œ≤]
  : CompleteSpace (Œ± ‚Üí·µá Œ≤) :=
  complete_of_cauchySeq_tendsto fun (f : ‚Ñï ‚Üí Œ± ‚Üí·µá Œ≤) (hf : CauchySeq f) => by
    /- We have to show that `f n` converges to a bounded continuous function.
      For this, we prove pointwise convergence to define the limit, then check
      it is a continuous bounded function, and then check the norm convergence. -/
    have ‚ü®b, b0, b_bound, b_lim‚ü© := cauchySeq_iff_le_tendsto_0.1 hf
    have f_bdd := fun x n m N hn hm => (BoundedContinuousFunction.dist_coe_le_dist x).trans (b_bound n m N hn hm)
    have fx_cau : ‚àÄ x, CauchySeq fun n => f n x :=
      fun x => cauchySeq_iff_le_tendsto_0.2 ‚ü®b, b0, f_bdd x, b_lim‚ü©
    choose F hF using fun x => cauchySeq_tendsto_of_complete (fx_cau x)
    /- `F : Œ± ‚Üí Œ≤`, `hF : ‚àÄ (x : Œ±), Tendsto (fun n ‚Ü¶ ‚Üë(f n) x) atTop (ùìù (F x))`
      `F` is the desired limit function. Check that it is uniformly approximated by `f N`. -/
    have fF_bdd : ‚àÄ x N, dist (f N x) (F x) ‚â§ b N := by
      intro x N
      have dist_lim : Tendsto (fun n ‚Ü¶ dist (f N x) (f n x)) atTop (ùìù (dist (f N x) (F x))) := by
        exact tendsto_const_nhds.dist (hF x)
      have dist_bdd : ‚àÄ·∂† n in atTop, dist (f N x) (f n x) ‚â§ b N := by
        rw [eventually_atTop]
        exact ‚ü®N, fun n hn ‚Ü¶ f_bdd x N n N (by rfl) hn ‚ü©
      exact le_of_tendsto dist_lim dist_bdd
    refine ‚ü®‚ü®‚ü®F, ?_‚ü©, ?_‚ü©, ?_‚ü©
    ¬∑ -- Check that `F` is continuous, as a uniform limit of continuous functions
      have : TendstoUniformly (fun n x => f n x) F atTop := by
        rw [Metric.tendstoUniformly_iff]
        intro Œµ Œµ0
        have hbŒµ : ‚àÄ·∂† n in atTop, b n < Œµ := b_lim (Iio_mem_nhds Œµ0)
        apply hbŒµ.mono
        intro n hn x
        rw [dist_comm]
        exact (fF_bdd x n).trans_lt hn
      exact this.continuous (Eventually.of_forall fun N => (f N).continuous)
    ¬∑ -- Check that `F` is bounded
      rcases (f 0).bounded with ‚ü®C, hC‚ü©
      refine ‚ü®b 0 + C + b 0, fun x y => ?_‚ü©
      calc
        dist (F x) (F y)
        _ ‚â§ dist (F x) (f 0 x) + dist (f 0 x) (f 0 y) + dist (f 0 y) (F y) := dist_triangle4 _ _ _ _
        _ ‚â§ b 0 + C + b 0 := by
          gcongr
          . rw [dist_comm]
            apply fF_bdd
          . apply hC
          . apply fF_bdd
    ¬∑ -- Check that `F` is close to `f N` in distance terms
      rw [tendsto_iff_dist_tendsto_zero]
      apply squeeze_zero (g := b)
      . intro; exact dist_nonneg
      . intro n
        rw [BoundedContinuousFunction.dist_le (b0 n)]
        intro x
        exact fF_bdd x n
      . exact b_lim

#check  ODE.FunSpace.continuous_compProj

#check FunSpace.mem_closedBall
theorem my_mem_closedBall
  {E : Type u} [NormedAddCommGroup E] {tmin tmax : ‚Ñù}
  {t‚ÇÄ : Icc tmin tmax} {x‚ÇÄ : E} {a r L : ‚Ñù‚â•0} {Œ± : FunSpace t‚ÇÄ x‚ÇÄ r L}
  (h : L * max (tmax - t‚ÇÄ) (t‚ÇÄ - tmin) ‚â§ a - r)
  {t : Icc tmin tmax} :
  Œ± t ‚àà closedBall x‚ÇÄ a := by
  calc dist (Œ± t) (x‚ÇÄ)
    _ ‚â§ dist (Œ± t) (Œ± t‚ÇÄ) + dist (Œ± t‚ÇÄ) x‚ÇÄ := dist_triangle _ _ _
    _ ‚â§ L * dist t t‚ÇÄ + r := by
      gcongr
      . exact Œ±.lipschitzWith.dist_le_mul t t‚ÇÄ
      . exact Œ±.mem_closedBall‚ÇÄ
    _ ‚â§ L * max (tmax - t‚ÇÄ) (t‚ÇÄ - tmin) + r := by
      gcongr
      apply abs_sub_le_max_sub t.2.1 t.2.2
    _ ‚â§ a - r + r := by gcongr
    _ = a := by ring

#check FunSpace.continuousOn_comp_compProj

#check FunSpace.next
/-
next (hf : IsPicardLindelof f t‚ÇÄ x‚ÇÄ a r L K) (hx : x ‚àà closedBall x‚ÇÄ r)
    (Œ± : FunSpace t‚ÇÄ x‚ÇÄ r L) : FunSpace t‚ÇÄ x‚ÇÄ r L where
  toFun t := picard f t‚ÇÄ x Œ±.compProj t
  -/
#check picard_apply
#check intervalIntegral.norm_integral_le_of_norm_le_const
#check intervalIntegral.norm_integral_le_integral_norm
#check intervalIntegral.norm_integral_le_abs_integral_norm
noncomputable def my_next
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f : ‚Ñù ‚Üí E ‚Üí E} {tmin tmax : ‚Ñù} {t‚ÇÄ : ‚Üë(Icc tmin tmax)} {x‚ÇÄ x : E} {a r L K : ‚Ñù‚â•0}
  (hf : IsPicardLindelof f t‚ÇÄ x‚ÇÄ a r L K)
  (hx : x ‚àà closedBall x‚ÇÄ ‚Üër)
  (Œ± : FunSpace t‚ÇÄ x‚ÇÄ r L)
  : FunSpace t‚ÇÄ x‚ÇÄ r L where
  toFun t := picard f t‚ÇÄ x Œ±.compProj t
  lipschitzWith := by
    simp_rw [lipschitzWith_iff_dist_le_mul, dist_eq_norm]
    intro t‚ÇÅ t‚ÇÇ
    calc ‚Äñpicard f t‚ÇÄ x Œ±.compProj t‚ÇÅ - picard f t‚ÇÄ x Œ±.compProj t‚ÇÇ‚Äñ
      _ = ‚Äñ(x + ‚à´ œÑ in t‚ÇÄ..t‚ÇÅ, f œÑ (Œ±.compProj œÑ)) - (x + ‚à´ œÑ in t‚ÇÄ..t‚ÇÇ, f œÑ (Œ±.compProj œÑ))‚Äñ := by
        rw [picard_apply, picard_apply]
      _ = ‚Äñ(‚à´ œÑ in t‚ÇÄ..t‚ÇÅ, f œÑ (Œ±.compProj œÑ)) - (‚à´ œÑ in t‚ÇÄ..t‚ÇÇ, f œÑ (Œ±.compProj œÑ))‚Äñ := by
        simp only [add_sub_add_left_eq_sub]
      _ = ‚Äñ‚à´ œÑ in t‚ÇÇ..t‚ÇÅ, f œÑ (Œ±.compProj œÑ)‚Äñ := by
        rw [intervalIntegral.integral_interval_sub_left]
        . apply Œ±.intervalIntegrable_comp_compProj hf
        . apply Œ±.intervalIntegrable_comp_compProj hf
      _ ‚â§ L * |(t‚ÇÅ : ‚Ñù) - t‚ÇÇ| := by
        apply intervalIntegral.norm_integral_le_of_norm_le_const
        intro t ht
        apply hf.norm_le
        . have := uIcc_subset_Icc t‚ÇÇ.2 t‚ÇÅ.2
          exact this <| uIoc_subset_uIcc ht
        . apply Œ±.mem_closedBall hf.mul_max_le
      _ = L * dist (t‚ÇÅ : ‚Ñù) t‚ÇÇ := by
        simp only [dist_eq_norm, Real.norm_eq_abs]
  mem_closedBall‚ÇÄ := by rwa [picard_apply‚ÇÄ]


#check ODE.FunSpace.dist_comp_iterate_next_le



/-

lemma dist_comp_iterate_next_le (hf : IsPicardLindelof f t‚ÇÄ x‚ÇÄ a r L K)
    (hx : x ‚àà closedBall x‚ÇÄ r) (n : ‚Ñï) (t : Icc tmin tmax)
    {Œ± Œ≤ : FunSpace t‚ÇÄ x‚ÇÄ r L}
    (h : dist ((next hf hx)^[n] Œ± t) ((next hf hx)^[n] Œ≤ t) ‚â§
      (K * |t - t‚ÇÄ.1|) ^ n / n ! * dist Œ± Œ≤) :
    dist (f t ((next hf hx)^[n] Œ± t)) (f t ((next hf hx)^[n] Œ≤ t)) ‚â§
      K ^ (n + 1) * |t - t‚ÇÄ.1| ^ n / n ! * dist Œ± Œ≤ :=


for all t ‚àà [tmin, tmax]
Œ±‚Çô := next ^[n] Œ±
d(Œ±‚Çô(t), Œ≤‚Çô(t)) ‚â§ (K * |t - t‚ÇÄ|) ^ n / n! * d(Œ±, Œ≤)
d(Œ±‚ÇÅ(t), Œ≤‚ÇÅ(t)) ‚â§ K * |t - t‚ÇÄ| * d(Œ±, Œ≤)

d(f(t, Œ±‚Çô(t)), f(t, Œ≤‚Çô(t))) ‚â§ K ^ (n + 1) * |t - t‚ÇÄ| ^ n / n! * d(Œ±, Œ≤)

d(Œ±‚Çô(t), Œ≤‚Çô(t)) ‚â§ K'(t)
d(f(t, Œ±‚Çô(t)), f(t, Œ≤‚Çô(t))) ‚â§ K * K'(t)

d(f(t, Œ±(t)), f(t, Œ≤(t))) ‚â§ K * d(Œ±(t), Œ≤(t))


d(Œ±‚ÇÅ(t), Œ≤‚ÇÅ(t))
  ‚â§ d( ‚à´ œÑ in t‚ÇÄ..t, f(t, Œ±(t)), ‚à´ œÑ in t‚ÇÄ..t, f(t, Œ≤(t)))
  = ‚Äñ (‚à´ œÑ in t‚ÇÄ..t, f(t, Œ±(t))) - (‚à´ œÑ in t‚ÇÄ..t, f(t, Œ≤(t)))‚Äñ
  = ‚Äñ‚à´ œÑ in t‚ÇÄ..t, (f(t, Œ±(t)) - f(t, Œ≤(t)))‚Äñ
    since ‚Äñ(f(t, Œ±(t)) - f(t, Œ≤(t)))‚Äñ ‚â§ K * d(Œ±(t), Œ≤(t)) ‚â§ K * d(Œ±, Œ≤) is const
  ‚â§ |t - t‚ÇÄ| * K * d(Œ±, Œ≤)

d(Œ±‚ÇÇ(t), Œ≤‚ÇÇ(t))
  ‚â§ d( ‚à´ œÑ in t‚ÇÄ..t, f(t, Œ±‚ÇÅ(t)), ‚à´ œÑ in t‚ÇÄ..t, f(t, Œ≤‚ÇÅ(t)))
  = ‚Äñ (‚à´ œÑ in t‚ÇÄ..t, f(t, Œ±‚ÇÅ(t))) - (‚à´ œÑ in t‚ÇÄ..t, f(t, Œ≤‚ÇÅ(t)))‚Äñ
  = ‚Äñ‚à´ œÑ in t‚ÇÄ..t, (f(t, Œ±‚ÇÅ(t)) - f(t, Œ≤‚ÇÅ(t)))‚Äñ
    since ‚Äñ(f(t, Œ±‚ÇÅ(t)) - f(t, Œ≤‚ÇÅ(t)))‚Äñ ‚â§ K * d(Œ±‚ÇÅ(t), Œ≤‚ÇÅ(t)) ‚â§ K * |t - t‚ÇÄ| * K * d(Œ±, Œ≤)
  ‚â§ |‚à´ œÑ in t‚ÇÄ..t, K * |œÑ - t‚ÇÄ| * K * d(Œ±, Œ≤)|
  ‚â§ K ^ 2 * d(Œ±, Œ≤) * |‚à´ œÑ in t‚ÇÄ..t, |œÑ - t‚ÇÄ||
  = K ^ 2 * d(Œ±, Œ≤) * ‚à´ œÑ in uIoc t‚ÇÄ t, |œÑ - t‚ÇÄ|
  = K ^ 2 * d(Œ±, Œ≤) * |t - t‚ÇÄ| ^ 2 / 2
  = (K * |t - t‚ÇÄ|) ^ 2 / 2 * d(Œ±, Œ≤)

-/
#check integral_pow_abs_sub_uIoc

#check IsPicardLindelof.lipschitzOnWith
#check FunSpace.dist_iterate_next_apply_le
#check intervalIntegral.integral_mono
#check intervalIntegral.norm_integral_le_integral_norm
#check MeasureTheory.norm_integral_le_of_norm_le_const

#check (‚àÄ·µê _ ‚àÇ_, _)
#check intervalIntegral.norm_integral_le_of_norm_le
#check intervalIntegral.norm_integral_le_abs_integral_norm
#check intervalIntegral.norm_integral_le_abs_of_norm_le
#check intervalIntegral.norm_integral_le_of_norm_le_const
#check intervalIntegral.integral_mono
#check intervalIntegral.abs_integral_mono_interval
#check MeasureTheory.integral_mono_of_nonneg
#check MeasureTheory.norm_integral_le_of_norm_le
#check MeasureTheory.norm_integral_le_of_norm_le_const

#check mem_nhdsWithin_iff_eventually
example [TopologicalSpace Œ±] {s t : Set Œ±} {x : Œ±}
  : (‚àÄ·∂† y in ùìù[t] x, y ‚àà s) ‚Üî (‚àÄ·∂† y in ùìù x, y ‚àà t ‚Üí y ‚àà s) := by
  exact mem_nhdsWithin_iff_eventually



-- prove n=0,1,2 of dist_iterate_next_apply_le
#check FunSpace.dist_iterate_next_apply_le


theorem my_dist_iterate_next_apply_le_0
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f : ‚Ñù ‚Üí E ‚Üí E} {tmin tmax : ‚Ñù} {t‚ÇÄ : ‚Üë(Icc tmin tmax)} {x‚ÇÄ x : E} {a r L K : ‚Ñù‚â•0}
  (hf : IsPicardLindelof f t‚ÇÄ x‚ÇÄ a r L K)
  (hx : x ‚àà closedBall x‚ÇÄ ‚Üër)
  (Œ± Œ≤ : FunSpace t‚ÇÄ x‚ÇÄ r L)
  (n : ‚Ñï) (t : ‚Üë(Icc tmin tmax))
  (hn : n = 0):
  dist (((FunSpace.next hf hx)^[n] Œ±).toFun t) (((FunSpace.next hf hx)^[n] Œ≤).toFun t) ‚â§
    (K * |(t : ‚Ñù) - t‚ÇÄ|) ^ n / n ! * dist Œ± Œ≤ := by
  subst hn
  simp
  rw [‚Üê FunSpace.toContinuousMap_apply_eq_apply,
      ‚Üê FunSpace.toContinuousMap_apply_eq_apply]
  exact ContinuousMap.dist_apply_le_dist t

theorem my_dist_iterate_next_apply_le_1
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f : ‚Ñù ‚Üí E ‚Üí E} {tmin tmax : ‚Ñù} {t‚ÇÄ : ‚Üë(Icc tmin tmax)} {x‚ÇÄ x : E} {a r L K : ‚Ñù‚â•0}
  (hf : IsPicardLindelof f t‚ÇÄ x‚ÇÄ a r L K)
  (hx : x ‚àà closedBall x‚ÇÄ ‚Üër)
  (Œ± Œ≤ : FunSpace t‚ÇÄ x‚ÇÄ r L)
  (n : ‚Ñï) (t : ‚Üë(Icc tmin tmax))
  (hn : n = 1):
  dist (((FunSpace.next hf hx)^[n] Œ±).toFun t) (((FunSpace.next hf hx)^[n] Œ≤).toFun t) ‚â§
    (K * |(t : ‚Ñù) - t‚ÇÄ|) ^ n / n ! * dist Œ± Œ≤ := by
  subst hn
  simp [-FunSpace.compProj_apply]
  calc
    _ = ‚Äñ(‚à´ œÑ in t‚ÇÄ..t, f œÑ (Œ±.compProj œÑ)) - (‚à´ œÑ in t‚ÇÄ..t, f œÑ (Œ≤.compProj œÑ))‚Äñ := by
      rw [dist_eq_norm]
    _ = ‚Äñ‚à´ œÑ in t‚ÇÄ..t, f œÑ (Œ±.compProj œÑ) - f œÑ (Œ≤.compProj œÑ)‚Äñ := by
      rw [intervalIntegral.integral_sub]
      . apply Œ±.intervalIntegrable_comp_compProj hf
      . apply Œ≤.intervalIntegrable_comp_compProj hf
    _ ‚â§ (K * dist Œ± Œ≤) * |(t : ‚Ñù) - t‚ÇÄ| := by
      apply intervalIntegral.norm_integral_le_of_norm_le_const
      intro s hs
      replace hs : s ‚àà Icc tmin tmax := uIcc_subset_Icc t‚ÇÄ.2 t.2 (uIoc_subset_uIcc hs)
      calc
        _ ‚â§ K * ‚ÄñŒ±.compProj s - Œ≤.compProj s‚Äñ := by
          apply (hf.lipschitzOnWith s hs).norm_sub_le
          . apply Œ±.mem_closedBall hf.mul_max_le
          . apply Œ≤.mem_closedBall hf.mul_max_le
        _ ‚â§ K * dist Œ± Œ≤ := by
          gcongr
          rw [‚Üê dist_eq_norm,
            Œ±.compProj_of_mem hs, Œ≤.compProj_of_mem hs,
            ‚Üê Œ±.toContinuousMap_apply_eq_apply,
            ‚Üê Œ≤.toContinuousMap_apply_eq_apply]
          apply ContinuousMap.dist_apply_le_dist
    _ = K * |(t : ‚Ñù) - t‚ÇÄ| * dist Œ± Œ≤ := by ring_nf

#check MeasureTheory.ae
#check MeasureTheory.ae_restrict_eq
theorem my_dist_iterate_next_apply_le_2
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f : ‚Ñù ‚Üí E ‚Üí E} {tmin tmax : ‚Ñù} {t‚ÇÄ : ‚Üë(Icc tmin tmax)} {x‚ÇÄ x : E} {a r L K : ‚Ñù‚â•0}
  (hf : IsPicardLindelof f t‚ÇÄ x‚ÇÄ a r L K)
  (hx : x ‚àà closedBall x‚ÇÄ ‚Üër)
  (Œ± Œ≤ : FunSpace t‚ÇÄ x‚ÇÄ r L)
  (n : ‚Ñï) (t : ‚Üë(Icc tmin tmax))
  (hn : n = 2):
  dist (((FunSpace.next hf hx)^[n] Œ±).toFun t) (((FunSpace.next hf hx)^[n] Œ≤).toFun t) ‚â§
    (K * |(t : ‚Ñù) - t‚ÇÄ|) ^ n / n ! * dist Œ± Œ≤ := by
  subst hn
  simp [-FunSpace.compProj_apply]
  calc
    _ = ‚Äñ(‚à´ œÑ in t‚ÇÄ..t, f œÑ ((FunSpace.next hf hx Œ±).compProj œÑ))
       - (‚à´ œÑ in t‚ÇÄ..t, f œÑ ((FunSpace.next hf hx Œ≤).compProj œÑ))‚Äñ := by
      rw [dist_eq_norm]
    _ = ‚Äñ‚à´ œÑ in t‚ÇÄ..t, f œÑ ((FunSpace.next hf hx Œ±).compProj œÑ)
                     - f œÑ ((FunSpace.next hf hx Œ≤).compProj œÑ)‚Äñ := by
      rw [intervalIntegral.integral_sub]
      . apply FunSpace.intervalIntegrable_comp_compProj hf
      . apply FunSpace.intervalIntegrable_comp_compProj hf
    _ ‚â§ |‚à´ œÑ in t‚ÇÄ..t, K ^ 2 * dist Œ± Œ≤ * (|œÑ - t‚ÇÄ|)| := by
      apply intervalIntegral.norm_integral_le_abs_of_norm_le
      rw [MeasureTheory.ae_restrict_iff']
      apply Eventually.of_forall
      intro s hs
      replace hs : s ‚àà Icc tmin tmax := uIcc_subset_Icc t‚ÇÄ.2 t.2 (uIoc_subset_uIcc hs)
      calc
        _ ‚â§ K * ‚Äñ(FunSpace.next hf hx Œ±).compProj s
               - (FunSpace.next hf hx Œ≤).compProj s‚Äñ := by
          apply (hf.lipschitzOnWith s hs).norm_sub_le
          . apply FunSpace.mem_closedBall hf.mul_max_le
          . apply FunSpace.mem_closedBall hf.mul_max_le
        _ ‚â§ K * (K * |s - t‚ÇÄ| * dist Œ± Œ≤) := by
          gcongr
          have := my_dist_iterate_next_apply_le_1 hf hx Œ± Œ≤ 1 (‚ü®s, hs‚ü© : Icc tmin tmax) (by rfl)
          simp only [Function.iterate_one,
            pow_one, Nat.factorial_one, Nat.cast_one, div_one] at this
          rwa [‚Üê dist_eq_norm,
            FunSpace.compProj_of_mem hs, FunSpace.compProj_of_mem hs]
        _ = K ^ 2 * dist Œ± Œ≤ * |s - t‚ÇÄ| := by ring
      . exact measurableSet_Ioc
      . apply ContinuousOn.intervalIntegrable
        fun_prop
    _ = K ^ 2 * dist Œ± Œ≤ * (|(t : ‚Ñù) - t‚ÇÄ| ^ 2 / 2) := by
      rw [intervalIntegral.integral_const_mul, abs_mul]
      congr
      . simp [mul_nonneg]
      . conv => lhs; pattern (|_ - _|); rw [‚Üê pow_one (|x - t‚ÇÄ|)]
        rw [intervalIntegral.abs_integral_eq_abs_integral_uIoc,
          integral_pow_abs_sub_uIoc]
        convert abs_eq_self.2 _
        . norm_num
        . infer_instance
        . positivity
    _ = (K * |(t : ‚Ñù) - t‚ÇÄ|) ^ 2 / 2 * dist Œ± Œ≤ := by ring

#check exists_between
#synth DenselyOrdered ‚Ñù

#check Function.IsFixedPt
/-
A : fun x ‚Ü¶ Œ±,
hA : ‚àÄ x, Function.IsFixedPt (next hf hx) (A x)
‚àÉ L, A is lip with L on Ball(x‚ÇÄ, r)

‚àÄ Œ±, d(x, y) = d(next(Œ±, x), next(Œ±, y))

d(A(x), A(y)) ‚â§ L d(x, y)

‚àÄ·∂† n in atTop,
d(A(x), A(y))
‚â§ d(A(x), next^[n](Œ±, x))
  + d(next^[n](Œ±, x), Œ±)
  + d(Œ±, next^[n](Œ±, y))
  + d(next^[n](Œ±, y), A(y))
‚â§ Œµ
  + K' * d(next(Œ±, x), Œ±)
  + K' * d(next(Œ±, y), Œ±)
  Œµ
‚â§ 2 * Œµ + K' * (d(next(Œ±, x), Œ±) + d(next(Œ±, y), Œ±))
-- pick Œ± = A(x)
‚â§ 2 * Œµ + K' * (d(next(A(x), x), A(x)) + d(next(A(x), y), A(x)))
‚â§ 2 * Œµ + K' * (0 + d(next(A(x), y), next(A(x), x)))
‚â§ 2 * Œµ + K' * d(x, y)

-/

#check FunSpace.dist_next_next
#check FunSpace.dist_iterate_next_le
#check FunSpace.dist_iterate_iterate_next_le_of_lipschitzWith
#check FunSpace.exists_forall_closedBall_funSpace_dist_le_mul
#check FunSpace.exists_isFixedPt_next
#check summable_pow_mul_geometric_of_norm_lt_one
theorem my_exists_forall_closedBall_funSpace_dist_le_mul
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f : ‚Ñù ‚Üí E ‚Üí E} {tmin tmax : ‚Ñù} {t‚ÇÄ : ‚Üë(Icc tmin tmax)} {x‚ÇÄ : E} {a r L K : ‚Ñù‚â•0}
  [CompleteSpace E]
  (hf : IsPicardLindelof f t‚ÇÄ x‚ÇÄ a r L K)
  (K' : ‚Ñù‚â•0)
  (fixedPt_iterate_next_bound : ‚àÄ x (hx : x ‚àà closedBall x‚ÇÄ r) Ax Œ±,
    Function.IsFixedPt (FunSpace.next hf hx) Ax
    ‚Üí ‚àÄ Œµ > 0, ‚àÄ·∂† n in atTop, dist Ax ((FunSpace.next hf hx)^[n] Œ±) ‚â§ Œµ)
  (iterate_next_self_bound : ‚àÄ x (hx : x ‚àà closedBall x‚ÇÄ r), ‚àÄ n, ‚àÄ Œ±,
      dist ((FunSpace.next hf hx)^[n] Œ±) Œ± ‚â§ K' * dist (FunSpace.next hf hx Œ±) Œ± )
  :
  ‚àÉ L',
    ‚àÄ (x y : E) (hx : x ‚àà closedBall x‚ÇÄ ‚Üër) (hy : y ‚àà closedBall x‚ÇÄ ‚Üër)
    (Œ± Œ≤ : FunSpace t‚ÇÄ x‚ÇÄ r L),
    Function.IsFixedPt (FunSpace.next hf hx) Œ± ‚Üí
    Function.IsFixedPt (FunSpace.next hf hy) Œ≤ ‚Üí
    dist Œ± Œ≤ ‚â§ ‚ÜëL' * dist x y := by
  use K'
  intro x y hx hy Œ± Œ≤ hŒ± hŒ≤
  suffices ‚àÄ Œµ > 0, dist Œ± Œ≤ ‚â§ K' * dist x y + Œµ by
    apply le_of_forall_pos_le_add this
  intro Œµ hŒµ
  have := half_pos hŒµ
  have ‚ü®n, ineq1, ineq2‚ü©: ‚àÉ n,
    dist Œ± ((FunSpace.next hf hx)^[n] Œ±) ‚â§ Œµ/2
    ‚àß dist ((FunSpace.next hf hy)^[n] Œ±) Œ≤ ‚â§ Œµ/2 := by
    have h1 := fixedPt_iterate_next_bound x hx Œ± Œ± hŒ± _ (half_pos hŒµ)
    have h2 := fixedPt_iterate_next_bound y hy Œ≤ Œ± hŒ≤ _ (half_pos hŒµ)
    simp_rw [dist_comm _ Œ≤]
    exact (h1.and h2).exists
  calc dist Œ± Œ≤
    _ ‚â§ dist Œ± ((FunSpace.next hf hx)^[n] Œ±)
        + dist ((FunSpace.next hf hx)^[n] Œ±) ((FunSpace.next hf hy)^[n] Œ±)
        + dist ((FunSpace.next hf hy)^[n] Œ±) Œ≤ := dist_triangle4 _ _ _ _
    _ ‚â§ (Œµ/2) + dist ((FunSpace.next hf hx)^[n] Œ±) ((FunSpace.next hf hy)^[n] Œ±) + (Œµ/2) := by
      gcongr
    _ = Œµ + dist ((FunSpace.next hf hx)^[n] Œ±) ((FunSpace.next hf hy)^[n] Œ±) := by ring
    _ ‚â§ Œµ + (dist ((FunSpace.next hf hx)^[n] Œ±) Œ±
          + dist Œ± ((FunSpace.next hf hy)^[n] Œ±)) := by
      gcongr
      apply dist_triangle
    _ ‚â§ Œµ + (K' * dist (FunSpace.next hf hx Œ±) Œ±
          + K' * dist (FunSpace.next hf hy Œ±) Œ±) := by
      gcongr
      . apply iterate_next_self_bound
      . rw [dist_comm]; apply iterate_next_self_bound
    _ = Œµ + (K' * 0
        + K' * dist (FunSpace.next hf hy Œ±) (FunSpace.next hf hx Œ±)) := by
      have : dist (FunSpace.next hf hx Œ±) Œ± = 0 := by
        rw [dist_eq_zero]
        exact hŒ±
      rw [this]
      conv => rhs; pattern (FunSpace.next _ hx Œ±); rw [hŒ±]
    _ = Œµ + K' * dist (FunSpace.next hf hy Œ±) (FunSpace.next hf hx Œ±) := by ring
    _ = Œµ + K' * dist x y := by
      rw [FunSpace.dist_next_next, dist_comm]
    _ = K' * dist x y + Œµ := by ring


#check hasDerivWithinAt_picard_Icc
#check intervalIntegral.FTCFilter


/-
class FTCFilter (a : outParam ‚Ñù) (outer : Filter ‚Ñù) (inner : outParam <| Filter ‚Ñù) : Prop
    extends TendstoIxxClass Ioc outer inner where
  pure_le : pure a ‚â§ outer
  le_nhds : inner ‚â§ ùìù a
  [meas_gen : IsMeasurablyGenerated inner]


pure a ‚â§ outer
f ‚äÜ pure a
s ‚àà outer ‚Üí s ‚àà pure a
s ‚àà outer ‚Üí a ‚àà s
(‚àÄ·∂† x in outer, x ‚àà s) ‚Üí a ‚àà s

inner ‚â§ ùìù a
ùìù a ‚äÜ inner
s ‚àà ùìù a ‚Üí s ‚àà inner
(‚àÄ·∂† x in ùìù a, x ‚àà s) ‚Üí (‚àÄ·∂† x in inter, x ‚àà s)
-/

example [TopologicalSpace Œ±] (a : Œ±) : pure a ‚â§ ùìù a := by
  exact Specializes.pure_le_nhds fun ‚¶ÉU‚¶Ñ a ‚Ü¶ a
example [TopologicalSpace Œ±] (a : Œ±) : pure a ‚â§ ùìù a := by
  show ‚àÄ s ‚àà ùìù a, a ‚àà s
  intro s hs
  rw [_root_.mem_nhds_iff] at hs
  have ‚ü®t, hts, ht, hat‚ü© := hs
  exact hts hat
example [MetricSpace Œ±] (a b : Œ±) : pure a ‚â§ ùìù b ‚Üî a = b := by
  show (‚àÄ s ‚àà ùìù b, a ‚àà s) ‚Üî a = b
  constructor
  . intro h
    by_contra!
    have : dist a b > 0 := dist_pos.2 this
    have : ball b (dist a b) ‚àà ùìù b := ball_mem_nhds b this
    have := h _ this
    have : dist a b < dist a b := this
    linarith
  . rintro rfl
    intro s hs
    rw [_root_.mem_nhds_iff] at hs
    have ‚ü®t, hts, ht, hat‚ü© := hs
    exact hts hat
example [MetricSpace Œ±] (a b : Œ±) : pure a ‚â§ ùìù b ‚Üî a = b := by
  exact pure_le_nhds_iff
example [MetricSpace Œ±] : T1Space Œ± := inferInstance

example (a : ‚Ñù) : ùìù[<] a ‚â§ ùìù[‚â§] a ‚àß ùìù[‚â§] a ‚â§ ùìù a := by
  constructor
  . refine nhdsWithin_mono a ?_
    exact Iio_subset_Iic_self
  . exact nhdsWithin_le_nhds

example (a : ‚Ñù) (s : Set ‚Ñù) : pure a ‚â§ ùìù[s] a ‚Üî a ‚àà s := by
  constructor
  . intro h
    apply h
    exact self_mem_nhdsWithin
  . intro h
    apply pure_le_nhdsWithin h
example : ùìù[Ici 1] (0 : ‚Ñù) = ‚ä• := by
  rw [eq_bot_iff]
  show ‚àÄ s, s ‚àà univ ‚Üí s ‚àà ùìù[Ici 1] 0
  rintro s -
  rw [mem_nhdsWithin_iff]
  refine ‚ü®1/2, one_half_pos, ?_‚ü©
  intro x ‚ü®h1, h2‚ü©
  have : |x| < 1/2 := by rwa [mem_ball_zero_iff] at h1
  have : x < 1/2 := (le_abs_self _).trans_lt this
  have : 1 ‚â§ x := h2
  linarith

example : (ùìù[Ioi 0] (0 : ‚Ñù)).NeBot := by
  exact nhdsGT_neBot 0

#check ClusterPt
#check mem_closure_iff_clusterPt
#check mem_closure_iff_nhdsWithin_neBot


#check IsPicardLindelof.of_time_independent
lemma my_of_time_independent
  {E : Type u} [NormedAddCommGroup E]
  {f : E ‚Üí E} {tmin tmax : ‚Ñù} {t‚ÇÄ : ‚Üë(Icc tmin tmax)} {x‚ÇÄ : E} {a r L K : ‚Ñù‚â•0}
  (hb : ‚àÄ x ‚àà closedBall x‚ÇÄ ‚Üëa, ‚Äñf x‚Äñ ‚â§ ‚ÜëL)
  (hl : LipschitzOnWith K f (closedBall x‚ÇÄ ‚Üëa))
  (hm : ‚ÜëL * max (tmax - ‚Üët‚ÇÄ) (‚Üët‚ÇÄ - tmin) ‚â§ ‚Üëa - ‚Üër) :
  IsPicardLindelof (fun _ ‚Ü¶ f) t‚ÇÄ x‚ÇÄ a r L K where
    lipschitzOnWith _ _ := hl
    continuousOn _ _ := continuousOn_const
    norm_le _ _ := hb
    mul_max_le := hm

#check IsPicardLindelof.of_contDiffAt_one
-- lemma of_contDiffAt_one [NormedSpace ‚Ñù E]
--     {f : E ‚Üí E} {x‚ÇÄ : E} (hf : ContDiffAt ‚Ñù 1 f x‚ÇÄ) (t‚ÇÄ : ‚Ñù) :
--     ‚àÉ (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) (a r L K : ‚Ñù‚â•0) (_ : 0 < r), IsPicardLindelof (fun _ ‚Ü¶ f)
--       (tmin := t‚ÇÄ - Œµ) (tmax := t‚ÇÄ + Œµ) ‚ü®t‚ÇÄ, (by simp [le_of_lt hŒµ])‚ü© x‚ÇÄ a r L K := by
--   -- Obtain ball of radius `a` within the domain in which f is `K`-lipschitz
--   obtain ‚ü®K, s, hs, hl‚ü© := hf.exists_lipschitzOnWith
--   obtain ‚ü®a, ha : 0 < a, has‚ü© := Metric.mem_nhds_iff.mp hs
--   set L := K * a + ‚Äñf x‚ÇÄ‚Äñ + 1 with hL
--   have hL0 : 0 < L := by positivity
--   have hb (x : E) (hx : x ‚àà closedBall x‚ÇÄ (a / 2)) : ‚Äñf x‚Äñ ‚â§ L := by
--     rw [hL]
--     calc
--       ‚Äñf x‚Äñ ‚â§ ‚Äñf x - f x‚ÇÄ‚Äñ + ‚Äñf x‚ÇÄ‚Äñ := norm_le_norm_sub_add _ _
--       _ ‚â§ K * ‚Äñx - x‚ÇÄ‚Äñ + ‚Äñf x‚ÇÄ‚Äñ := by
--         gcongr
--         rw [‚Üê dist_eq_norm, ‚Üê dist_eq_norm]
--         apply hl.dist_le_mul x _ x‚ÇÄ (mem_of_mem_nhds hs)
--         apply subset_trans _ has hx
--         exact closedBall_subset_ball <| half_lt_self ha -- this is where we need `a / 2`
--       _ ‚â§ K * a + ‚Äñf x‚ÇÄ‚Äñ := by
--         gcongr
--         rw [‚Üê mem_closedBall_iff_norm]
--         exact closedBall_subset_closedBall (half_le_self (le_of_lt ha)) hx
--       _ ‚â§ L := le_add_of_nonneg_right zero_le_one
--   let Œµ := a / L / 2 / 2
--   have hŒµ0 : 0 < Œµ := by positivity
--   refine ‚ü®Œµ, hŒµ0,
--     ‚ü®a / 2, le_of_lt <| half_pos ha‚ü©, ‚ü®a / 2, le_of_lt <| half_pos ha‚ü© / 2,
--     ‚ü®L, le_of_lt hL0‚ü©, K, half_pos <| half_pos ha, ?_‚ü©
--   apply of_time_independent hb <|
--     hl.mono <| subset_trans (closedBall_subset_ball (half_lt_self ha)) has
--   rw [NNReal.coe_mk, add_sub_cancel_left, sub_sub_cancel, max_self, NNReal.coe_div,
--     NNReal.coe_two, NNReal.coe_mk, mul_comm, ‚Üê le_div_iff‚ÇÄ hL0, sub_half, div_right_comm (a / 2),
--     div_right_comm a]

theorem my_of_contDiffAt_one
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f : E ‚Üí E} {x‚ÇÄ : E}
  (hf : ContDiffAt ‚Ñù 1 f x‚ÇÄ) (t‚ÇÄ : ‚Ñù)
  : ‚àÉ Œµ, ‚àÉ (hŒµ : 0 < Œµ), ‚àÉ a r L K, ‚àÉ (_ : 0 < r),
    IsPicardLindelof (fun _ ‚Ü¶ f)
    (tmin := t‚ÇÄ - Œµ) (tmax := t‚ÇÄ + Œµ) ‚ü®t‚ÇÄ, (by simp [le_of_lt hŒµ])‚ü© x‚ÇÄ a r L K := by
  -- Obtain ball of radius `a` within the domain in which f is `K`-lipschitz
  obtain ‚ü®K, s, hs, hl‚ü© := hf.exists_lipschitzOnWith

  have ‚ü®L, hL‚ü© := exists_gt ‚Äñf x‚ÇÄ‚Äñ
  have hL0 : L > 0 := (norm_nonneg (f x‚ÇÄ)).trans_lt hL
  have := hf.continuousAt.norm.eventually (Iio_mem_nhds hL)
  obtain ‚ü®a, ha : 0 < a, has'‚ü© := Metric.mem_nhds_iff.mp (this.and hs)
  have has : ball x‚ÇÄ a ‚äÜ s := fun x hx ‚Ü¶ (has' hx).2
  have hb (x : E) (hx : x ‚àà closedBall x‚ÇÄ (a / 2)) : ‚Äñf x‚Äñ ‚â§ L := by
    have : x ‚àà ball x‚ÇÄ a := lt_of_le_of_lt hx (half_lt_self ha)
    exact (has' this).1.le

  let Œµ := a / L / 2 / 2
  have hŒµ0 : 0 < Œµ := by positivity
  refine ‚ü®Œµ, hŒµ0,
    ‚ü®a / 2, le_of_lt <| half_pos ha‚ü©, ‚ü®a / 2, le_of_lt <| half_pos ha‚ü© / 2,
    ‚ü®L, le_of_lt hL0‚ü©, K, half_pos <| half_pos ha, ?_‚ü©
  apply IsPicardLindelof.of_time_independent hb <|
    hl.mono <| subset_trans (closedBall_subset_ball (half_lt_self ha)) has
  rw [NNReal.coe_mk, add_sub_cancel_left, sub_sub_cancel, max_self, NNReal.coe_div,
    NNReal.coe_two, NNReal.coe_mk, mul_comm, ‚Üê le_div_iff‚ÇÄ hL0, sub_half, div_right_comm (a / 2),
    div_right_comm a]


#check IsPicardLindelof.exists_eq_forall_mem_Icc_eq_picard
#check IsPicardLindelof.exists_eq_forall_mem_Icc_hasDerivWithinAt
#check IsPicardLindelof.exists_forall_hasDerivWithinAt_Icc_eq
#check IsPicardLindelof.exists_eq_forall_mem_Icc_hasDerivWithinAt‚ÇÄ


#check IsPicardLindelof.exists_eq_forall_mem_Icc_eq_picard
theorem my_exists_eq_forall_mem_Icc_eq_picard
  {E : Type u} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]
  {f : ‚Ñù ‚Üí E ‚Üí E} {tmin tmax : ‚Ñù} {t‚ÇÄ : ‚Üë(Icc tmin tmax)} {x‚ÇÄ x : E} {a r L K : ‚Ñù‚â•0}
  (hf : IsPicardLindelof f t‚ÇÄ x‚ÇÄ a r L K) (hx : x ‚àà closedBall x‚ÇÄ r)
  : ‚àÉ Œ± : ‚Ñù ‚Üí E, Œ± t‚ÇÄ = x ‚àß ‚àÄ t ‚àà Icc tmin tmax, Œ± t = picard f t‚ÇÄ x Œ± t := by
  obtain ‚ü®Œ±, hŒ±‚ü© := FunSpace.exists_isFixedPt_next hf hx

  refine ‚ü®Œ±.compProj, ?_, fun t ht ‚Ü¶ ?_‚ü©
  . rw [‚Üê hŒ±]; simp
  . nth_rw 1 [‚Üê hŒ±, FunSpace.compProj_apply, FunSpace.next_apply, projIcc_of_mem _ ht];



/-

Œ±'(t) = f(t, Œ±(t)), Œ±(t‚ÇÄ) = x‚ÇÄ
P(Œ±)(t) = x‚ÇÄ + ‚à´ œÑ in t‚ÇÄ..t, f(œÑ, Œ±(œÑ))
‚ÄñP(Œ±)(t) - P(Œ≤)(t)‚Äñ
= ‚Äñ‚à´ œÑ in t‚ÇÄ..t, f(œÑ, Œ±(œÑ)) - f(œÑ, Œ≤(œÑ))‚Äñ
‚â§ ‚à´ œÑ in t‚ÇÄ..t, ‚Äñf(œÑ, Œ±(œÑ)) - f(œÑ, Œ≤(œÑ))‚Äñ
‚â§ ‚à´ œÑ in t‚ÇÄ..t, K * ‚ÄñŒ±(œÑ) - Œ≤(œÑ)‚Äñ
‚â§ ‚à´ œÑ in t‚ÇÄ..t, K * ‚ÄñŒ± - Œ≤‚Äñ
= (t - t‚ÇÄ) * K * ‚ÄñŒ± - Œ≤‚Äñ
let t‚ÇÅ - t‚ÇÄ small the (t-t‚ÇÄ) * K ‚â§ (t‚ÇÅ-t‚ÇÄ) * K < 1

‚ÄñP^[n+1](Œ±)(t) - P^[n+1](Œ≤)(t)‚Äñ
‚â§ ‚à´ œÑ in t‚ÇÄ..t, K * ‚ÄñP^[n](Œ±)(œÑ) - P^[n](Œ≤)(œÑ)‚Äñ
‚â§ ‚à´ œÑ in t‚ÇÄ..t, K * B(n)(œÑ)
‚â§ B(n + 1)(t)

B(0)(t) = ‚ÄñŒ± - Œ≤‚Äñ
B(n + 1)(t) = ‚à´ œÑ in t‚ÇÄ..t, K * B(n)(œÑ)
‚Üí B(1)(t) = (t - t‚ÇÄ) * K * ‚ÄñŒ± - Œ≤‚Äñ
‚Üí B(2)(t) = K ^ 2 * ‚ÄñŒ± - Œ≤‚Äñ * (t - t‚ÇÄ)^2 / 2
‚Üí B(3)(t) = K ^ 3 * ‚ÄñŒ± - Œ≤‚Äñ * (t - t‚ÇÄ)^3 / 3!
‚Üí ...
‚Üí B(n)(t) = K ^ n * ‚ÄñŒ± - Œ≤‚Äñ * (t - t‚ÇÄ)^n / n!

‚ÄñP^[n](Œ±)(t) - P^[n](Œ≤)(t)‚Äñ
‚â§ K ^ n * ‚ÄñŒ± - Œ≤‚Äñ * (t - t‚ÇÄ)^n / n!
‚Üí ‚ÄñP^[n](Œ±) - P^[n](Œ≤)‚Äñ
‚â§ (K * (t‚ÇÅ - t‚ÇÄ))^n / n! * ‚ÄñŒ± - Œ≤‚Äñ ‚Üí 0 < 1
‚Üí ‚àÉ m, ‚ÄñP^[m](Œ±) - P^[m](Œ≤)‚Äñ < C * ‚ÄñŒ± - Œ≤‚Äñ, where 0 ‚â§ C < 1




-/
#check abs_le_abs
#check intervalIntegral.abs_integral_eq_abs_integral_uIoc
#check intervalIntegral.abs_integral_le_integral_abs
#check intervalIntegral.norm_integral_le_abs_integral_norm
